#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <array>
#include <list>
#include <numeric>
#include <iterator>
#include <algorithm>
#include <functional>
using namespace std;



void elimdups(vector<string>&);
string make_plural(size_t, const string&, const string&);
void biggies(vector<string>&, vector<string>::size_type);
ostream& print(ostream& os, const string& s, char c);

ostream& print(ostream& os, const string& s, char c)
{
	return os << s << c;
}
void elimdups(vector<string>& words) {
	sort(words.begin(), words.end());

	auto end_unique = unique(words.begin(), words.end());


	words.erase(end_unique, words.end());
	cout << "erase" << endl;

	for (auto a : words) {
		cout << a << " ";
	}
	cout << endl << endl;

}
bool partition_sz(const string& a, size_t sz) {
	return a.size() >= sz;
};
string make_plural(size_t ctr, const string& word, const string& ending)
{
	return (ctr > 1) ? word + ending : word;
}

void biggies(vector<string>& words, vector<string>::size_type sz)
{
	elimdups(words);

	stable_sort(words.begin(), words.end(),
		[](const string& a, const string& b) {return a.size() < b.size(); });//hi kiml love peace horrible
	cout << "stable sort" << endl;
	for (auto a : words) {
		cout << a << " ";
	}
	cout << endl << endl;


	auto wc = partition(words.begin(), words.end(),
		bind(partition_sz, placeholders::_1, sz));


	auto count = wc - words.begin(); // wcëŠ” iterator
	cout << count << " " << make_plural(count, "word", +"s")
		<< " of length " << sz << " or longer" << endl;


	for_each(words.begin(), wc,
		bind(print, ref(cout), placeholders::_1, ' '));
	cout << endl;

}

int main()
{
	vector<string> kim = { "the",  "quick", "red",  "fox", "jumps",
							   "over", "the",   "slow", "red", "turtle" };
	biggies(kim, 6);

	return 0;
}
