
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <array>
#include <list>
#include <numeric>
#include <iterator>
#include <algorithm>
using namespace std;

void elimdups(vector<string>&);
string make_plural(size_t, const string&, const string&);
void biggies(vector<string>&, vector<string>::size_type);

void elimdups(vector<string>& words) {
	sort(words.begin(), words.end());
	
	auto end_unique = unique(words.begin(), words.end());
	
	words.erase(end_unique, words.end());
}

string make_plural(size_t ctr, const string& word, const string& ending)
{
	return (ctr > 1) ? word + ending : word;
}

void biggies(vector<string>& words, vector<string>::size_type sz)
{
	elimdups(words);
	
	stable_sort(words.begin(), words.end(),
		[](const string& a, const string& b) {return a.size() < b.size(); });

	auto wc = find_if(words.begin(), words.end(),
		[sz](const string& a)
		{return a.size() >= sz; });

	auto count = words.end() - wc; // wcëŠ” iterator
	cout << count << " " << make_plural(count, "word", +"s")
		<< " of length " << sz << " or longer" << endl;

	for_each(wc, words.end(),
		[](const string& s) {cout << s << " "; });
	cout << endl;

}
int main()
{
	vector<string> kim = { "love", "peace", "horrible", "love", "peace", "hi", "hi" };
	biggies(kim, 4);



	return 0;
}
