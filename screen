#include <iostream>
#include <string>
#include <vector>

using namespace std;
class Screen {
public:
	using pos = string::size_type;
	Screen() = default;
	Screen(pos ht, pos wd) : height(ht), width(wd), 
		                   contents(ht* wd, ' ') {}
	Screen(pos ht, pos wd, char c): height(ht), width(wd),
		                            contents(ht * wd, c) {}
	char get() const 
	   { return contents[cursor]; }
	char get(pos ht, pos wd) const;

	Screen& set(char);
	Screen& set(pos, pos, char);

	Screen& move(pos r, pos c);

	Screen& display(ostream& os);
	//{ do_display(os); return *this; }
	const Screen& display(ostream& os) const;
	//{ do_display(os); return *this; }

private:
	pos cursor = 0;
	pos height = 0, width = 0;
	string contents;
	void do_display(ostream& os) const;// { os << contents; }
};

//class Window_mgr {};

inline
Screen& Screen::move(pos r, pos c)
{
	pos row = r * width;
	cursor = row + c;
	return *this;
}
inline
char Screen::get(pos r, pos c) const
{
	pos row = r * width;
	return contents[row + c];
}
inline
Screen& Screen::set(char c)
{
	contents[cursor] = c;
	return *this;
}
inline 
Screen& Screen::set(pos r, pos col, char ch)
{
	contents[r * width + col] = ch;
	return *this;
}
inline
const Screen& Screen::display(std::ostream& os) const {
	do_display(os);
	return *this;
}

inline
Screen& Screen::display(std::ostream& os) {
	do_display(os);
	return *this;
}

void Screen::do_display(ostream& os) const {
	//os << contents;
	for (pos i = 0; i != contents.size(); ++i) {
		os << contents[i];
		if ((i + 1) % width == 0 && i + 1 != contents.size())
			os << "\n";
	}
}
int main() {
	Screen myScreen(5, 5, 'X');
	myScreen.move(4, 0).set('#').display(cout);
	cout << "\n";
	myScreen.display(cout);
	cout << "\n";
	return 0;
}
